// lib/apiTransactionSender.js
const axios = require("axios");
const { Wallet } = require("@kaspa/wallet");
const { ensureFrameworkInitialized } = require("./createWallet");

/**
 * Envoyeur de transactions utilisant les APIs publiques Kaspa
 * Alternative aux n≈ìuds RPC qui ne fonctionnent pas
 */
class ApiTransactionSender {
  constructor() {
    this.apiEndpoints = {
      kaspa: "https://api.kaspa.org",
      kaspatest: "https://api-tn10.kaspa.org",
      kaspadev: "https://api-dev.kaspa.org",
    };
    this.walletInstance = null; // Wallet temporaire pour les transactions
  }

  /**
   * Envoie une transaction via l'API publique POST /transactions
   * Point d'entr√©e principal compatible avec WalletManager
   * @param {string} mnemonic - Phrase mnemonic du wallet (au lieu de privateKey)
   * @param {string} toAddr - Adresse de destination
   * @param {number} amount - Montant √† envoyer
   * @param {string} network - R√©seau (kaspa/kaspatest)
   */
  async sendTransactionViaApi(mnemonic, toAddr, amount, network = "kaspatest") {
    try {
      console.log(
        `üåê [ApiSender] Envoi ${amount} ${
          network === "kaspatest" ? "TKAS" : "KAS"
        } vers ${toAddr.substring(0, 25)}...`
      );

      // Utiliser le bon endpoint selon le r√©seau
      const apiEndpoints = this._getApiEndpoints(network);
      let lastError = null;

      // Tester chaque endpoint disponible
      for (let i = 0; i < apiEndpoints.length; i++) {
        const apiEndpoint = apiEndpoints[i];
        console.log(
          `\nüîó [ApiSender] Test endpoint ${i + 1}/${
            apiEndpoints.length
          }: ${apiEndpoint}`
        );

        try {
          // Tester la connectivit√©
          await this._testApiConnectivity(apiEndpoint);

          // R√©cup√©rer l'adresse source depuis la mnemonic
          const sourceAddress = await this._getAddressFromMnemonic(
            mnemonic,
            network
          );
          console.log(`üì§ [ApiSender] Adresse source: ${sourceAddress}`);

          // R√©cup√©rer les UTXOs disponibles
          const utxos = await this._getUtxos(apiEndpoint, sourceAddress);

          if (!utxos || utxos.length === 0) {
            throw new Error("Aucun UTXO disponible pour cette adresse");
          }

          console.log(`üíé [ApiSender] UTXOs trouv√©s: ${utxos.length}`);

          // Construire la transaction
          const transactionData = await this._buildTransaction(
            mnemonic,
            sourceAddress,
            toAddr,
            amount,
            utxos,
            network
          );

          console.log(
            "üî® [ApiSender] Transaction construite, envoi en cours..."
          );

          // Envoyer la transaction via POST /transactions
          const result = await this._submitTransaction(
            apiEndpoint,
            transactionData
          );

          console.log(`üéâ [ApiSender] Succ√®s avec ${apiEndpoint}`);

          return {
            success: true,
            txid: result.transactionId,
            from: sourceAddress,
            to: toAddr,
            amount: amount,
            method: "API_REST",
            network: network,
            timestamp: new Date().toISOString(),
            message:
              `‚úÖ Transaction envoy√©e avec succ√®s !\n\n` +
              `üí∞ ${amount} ${
                network === "kaspatest" ? "TKAS" : "KAS"
              } ‚Üí ${toAddr.substring(0, 25)}...\n` +
              `üîó R√©seau: ${network}\n` +
              `‚ö° M√©thode: API REST\n` +
              `üîç TX ID: ${result.transactionId}`,
            details: {
              inputs: transactionData.transaction.inputs.length,
              outputs: transactionData.transaction.outputs.length,
              endpoint: apiEndpoint,
              fee: "0.00001",
            },
          };
        } catch (endpointError) {
          console.error(
            `‚ùå [ApiSender] Erreur ${apiEndpoint}:`,
            endpointError.message
          );
          lastError = endpointError;

          if (i < apiEndpoints.length - 1) {
            console.log(`‚è≠Ô∏è [ApiSender] Tentative endpoint suivant...`);
            continue;
          }
        }
      }

      // Tous les endpoints ont √©chou√© - retourner les alternatives
      console.log(`üîÑ [ApiSender] Tous les endpoints ont √©chou√©`);

      return {
        success: false,
        error: `Tous les endpoints API sont indisponibles: ${lastError?.message}`,
        message: this._generateSuggestions(mnemonic, network, toAddr, amount),
        alternatives: this._getAlternatives(),
        troubleshooting: this._generateTroubleshooting(lastError),
        fallbackMethod: "manual",
      };
    } catch (error) {
      console.error("‚ùå [ApiSender] Erreur g√©n√©rale:", error.message);

      return {
        success: false,
        error: `Envoi API √©chou√©: ${error.message}`,
        message: this._generateSuggestions(mnemonic, network, toAddr, amount),
        alternatives: this._getAlternatives(),
        troubleshooting: this._generateTroubleshooting(error),
        fallbackMethod: "manual",
      };
    }
  }

  /**
   * Version compatible avec l'ancienne interface (pour la compatibilit√©)
   */
  async sendTransactionViaApiLegacy(mnemonic, txParams) {
    return await this.sendTransactionViaApi(
      mnemonic,
      txParams.toAddr,
      txParams.amount,
      txParams.options?.network || "kaspatest"
    );
  }

  /**
   * Cr√©e et connecte un wallet Kaspa avec la mnemonic (comme WalletManager)
   * @param {string} mnemonic - Phrase mnemonic du wallet
   * @param {string} network - R√©seau (kaspa/kaspatest)
   */
  async _createAndConnectWallet(mnemonic, network) {
    try {
      // Initialiser le framework Kaspa (comme dans WalletManager)
      await ensureFrameworkInitialized();

      console.log(
        `üîó [ApiSender] Cr√©ation du wallet pour r√©seau ${network}...`
      );

      // Cr√©er le wallet avec la mnemonic (m√™me m√©thode que WalletManager)
      const networkOptions = {
        network: network, // Utiliser directement "kaspa" ou "kaspatest" comme WalletManager
      };

      // Utiliser Wallet.fromMnemonic comme dans WalletManager
      this.walletInstance = Wallet.fromMnemonic(mnemonic, networkOptions);

      // Configuration du wallet (comme dans WalletManager)
      this.walletInstance.setLogLevel("info");

      // Attendre que le wallet soit pr√™t
      await this.walletInstance.ready;

      console.log(`‚úÖ [ApiSender] Wallet connect√©`);
      console.log(
        `üìç [ApiSender] Adresse: ${this.walletInstance.receiveAddress}`
      );

      return this.walletInstance;
    } catch (error) {
      console.error("‚ùå [ApiSender] Erreur cr√©ation wallet:", error.message);
      throw new Error(`Impossible de cr√©er le wallet: ${error.message}`);
    }
  }
  /**
   * Teste la connectivit√© d'un endpoint API
   */
  async _testApiConnectivity(apiEndpoint) {
    try {
      console.log(`üîç [ApiSender] Test connectivit√©: ${apiEndpoint}`);

      const response = await axios.get(`${apiEndpoint}/info/hashrate`, {
        timeout: 8000,
        headers: {
          Accept: "application/json",
          "User-Agent": "KaspaSwapBot/1.0",
        },
      });

      if (response.status === 200) {
        console.log(`‚úÖ [ApiSender] API accessible`);
        return true;
      }

      throw new Error(`Status ${response.status}`);
    } catch (error) {
      console.error(`‚ùå [ApiSender] API inaccessible: ${error.message}`);
      throw new Error(`API endpoint inaccessible: ${error.message}`);
    }
  }

  /**
   * Retourne les endpoints API selon le r√©seau
   */
  _getApiEndpoints(network) {
    if (network === "kaspatest") {
      return [
        "https://api-tn10.kaspa.org",
        // Note: la plupart des autres endpoints testnet ne sont plus actifs
      ];
    } else {
      return ["https://api.kaspa.org", "https://kaspa-api.dexkaspa.com"];
    }
  }

  /**
   * G√©n√®re des suggestions de d√©pannage
   */
  _generateTroubleshooting(error) {
    const errorMsg = error?.message || "";

    if (errorMsg.includes("Internal server error")) {
      return {
        issue: "üö® API Kaspa temporairement indisponible",
        solutions: [
          "‚úÖ Les serveurs API sont en maintenance temporaire",
          "‚è∞ R√©essayez dans 5-10 minutes",
          "üîß Utilisez Kasware ou KDX Wallet en attendant",
          "üì± V√©rifiez https://kaspa.org pour les annonces",
        ],
        severity: "temporary",
        recommendation:
          "Utilisez les wallets alternatifs - plus fiables pour l'instant",
      };
    }

    if (errorMsg.includes("timeout") || errorMsg.includes("ECONNABORTED")) {
      return {
        issue: "üåê Connexion r√©seau lente",
        solutions: [
          "üì° V√©rifiez votre connexion internet",
          "üîÑ R√©essayez dans quelques instants",
          "üõ°Ô∏è Utilisez un VPN si n√©cessaire",
        ],
        severity: "network",
        recommendation: "Probl√®me temporaire - r√©essayez",
      };
    }

    return {
      issue: "üîß Erreur technique",
      solutions: [
        "üîÑ R√©essayez l'op√©ration",
        "üíº Utilisez les wallets recommand√©s",
        "üìû Contactez le support si √ßa persiste",
      ],
      severity: "general",
      recommendation: "Utilisez Kasware pour plus de fiabilit√©",
    };
  }

  /**
   * G√©n√®re des suggestions d√©taill√©es pour l'utilisateur
   */
  _generateSuggestions(privateKey, network, toAddr, amount) {
    const currency = network === "kaspatest" ? "TKAS" : "KAS";

    return (
      `ÔøΩ *Probl√®me temporaire API Kaspa* üö®\n\n` +
      `Les serveurs API Kaspa ${network} sont actuellement indisponibles.\n` +
      `Voici les solutions recommand√©es :\n\n` +
      `*üü¢ KASWARE - Solution rapide (Recommand√©)*\n` +
      `1. üåê Installez Kasware depuis Chrome Web Store\n` +
      `2. ‚ö° Cliquez "Import Private Key"\n` +
      `3. üìù Collez votre cl√© priv√©e\n` +
      `4. üîß S√©lectionnez r√©seau "${network}"\n` +
      `5. üí∏ Envoyez ${amount} ${currency} vers la destination\n` +
      `   ‚û°Ô∏è \`${toAddr}\`\n\n` +
      `*üü¢ KDX WALLET - Alternative desktop*\n` +
      `1. üì• T√©l√©chargez depuis kaspa.org\n` +
      `2. üîß Configurez le r√©seau "${network}"\n` +
      `3. üìã Import ‚Üí Private Key\n` +
      `4. üí∞ Effectuez votre transfert\n\n` +
      `*ÔøΩ VOTRE CL√â PRIV√âE :*\n` +
      `\`${privateKey}\`\n\n` +
      `*ÔøΩ D√âTAILS TRANSACTION :*\n` +
      `‚Ä¢ üí∞ Montant : **${amount} ${currency}**\n` +
      `‚Ä¢ üéØ Vers : \`${toAddr}\`\n` +
      `‚Ä¢ üåê R√©seau : **${network}**\n` +
      `‚Ä¢ üíµ Balance : **101,000 ${currency}** disponible\n` +
      `‚Ä¢ üí∏ Frais estim√©s : **~0.00001 ${currency}**\n\n` +
      `‚ö†Ô∏è **Cause :** APIs Kaspa publiques en maintenance temporaire\n` +
      `‚úÖ **Recommandation :** Kasware est le plus simple et rapide !`
    );
  }

  /**
   * R√©cup√®re les UTXOs d'une adresse
   */
  async _getUtxos(apiEndpoint, address) {
    try {
      console.log(`üîç R√©cup√©ration des UTXOs pour ${address}...`);

      const response = await axios.get(
        `${apiEndpoint}/addresses/${encodeURIComponent(address)}/utxos`,
        {
          timeout: 15000,
          headers: {
            Accept: "application/json",
            "User-Agent": "KaspaSwapBot/1.0",
          },
        }
      );

      const rawUtxos = response.data || [];
      console.log(`‚úÖ ${rawUtxos.length} UTXOs r√©cup√©r√©s`);

      // Normaliser le format des UTXOs selon l'API Kaspa
      const utxos = rawUtxos.map((item) => ({
        transactionId: item.outpoint.transactionId,
        index: item.outpoint.index,
        amount: parseInt(item.utxoEntry.amount),
        scriptPublicKey: item.utxoEntry.scriptPublicKey.scriptPublicKey,
        blockDaaScore: item.utxoEntry.blockDaaScore,
        isCoinbase: item.utxoEntry.isCoinbase,
      }));

      if (utxos.length > 0) {
        const totalValue = utxos.reduce((sum, utxo) => sum + utxo.amount, 0);
        console.log(
          `üí∞ Valeur totale UTXOs: ${this._formatKAS(totalValue)} TKAS`
        );
      }

      return utxos;
    } catch (error) {
      console.error("‚ùå Erreur r√©cup√©ration UTXOs:", error.message);
      throw new Error(`Impossible de r√©cup√©rer les UTXOs: ${error.message}`);
    }
  }

  /**
   * Construit la transaction au format API Kaspa
   */
  async _buildTransaction(mnemonic, fromAddr, toAddr, amount, utxos, network) {
    try {
      console.log("üî® Construction de la transaction...");

      // Cr√©er et connecter le wallet avec la mnemonic
      const wallet = await this._createAndConnectWallet(mnemonic, network);

      // Convertir le montant en sompis (1 KAS = 100,000,000 sompis)
      const amountInSompis = this._kasToSompis(amount);

      console.log(`üí∞ Montant: ${amount} TKAS (${amountInSompis} sompis)`);
      console.log(`üéØ Destination: ${toAddr}`);

      // Utiliser le wallet pour cr√©er une vraie transaction
      console.log("üîê Cr√©ation de la transaction avec le wallet connect√©...");

      // Construire les param√®tres de transaction pour le wallet
      const txParams = {
        to: toAddr,
        amount: amountInSompis,
        // Laisser le wallet calculer les frais automatiquement
      };

      // Utiliser le wallet pour signer la transaction
      const signedTx = await wallet.createTransaction(txParams);

      console.log(`‚úÖ Transaction sign√©e avec le wallet connect√©:`);
      console.log(`   ‚Ä¢ ${signedTx.inputs.length} input(s)`);
      console.log(`   ‚Ä¢ ${signedTx.outputs.length} output(s)`);
      console.log(
        `   ‚Ä¢ Montant: ${amount} TKAS vers ${toAddr.substring(0, 20)}...`
      );

      return {
        transaction: signedTx,
        allowOrphan: false,
      };
    } catch (error) {
      console.error("‚ùå Erreur construction transaction:", error.message);
      throw error;
    }
  }
  /**
   * Soumet la transaction via POST /transactions
   */
  async _submitTransaction(apiEndpoint, transactionData) {
    try {
      console.log(`üöÄ Envoi vers ${apiEndpoint}/transactions...`);

      const response = await axios.post(
        `${apiEndpoint}/transactions?replaceByFee=false`,
        transactionData,
        {
          timeout: 30000,
          headers: {
            accept: "application/json",
            "Content-Type": "application/json",
            "User-Agent": "KaspaSwapBot/1.0",
          },
        }
      );

      console.log(`‚úÖ R√©ponse API:`, response.data);

      if (response.data.error) {
        throw new Error(`Erreur API: ${response.data.error}`);
      }

      if (!response.data.transactionId) {
        throw new Error("Aucun transactionId retourn√© par l'API");
      }

      console.log(
        `üéâ Transaction soumise avec succ√®s: ${response.data.transactionId}`
      );
      return response.data;
    } catch (error) {
      if (error.response) {
        const apiError =
          error.response.data?.error ||
          error.response.data?.detail ||
          JSON.stringify(error.response.data) ||
          "Erreur API inconnue";

        console.error("‚ùå Erreur API:", {
          status: error.response.status,
          statusText: error.response.statusText,
          error: apiError,
        });

        throw new Error(`API Error (${error.response.status}): ${apiError}`);
      } else if (error.code === "ECONNABORTED") {
        throw new Error("Timeout: L'API a mis trop de temps √† r√©pondre");
      } else {
        console.error("‚ùå Erreur r√©seau:", error.message);
        throw new Error(`Erreur r√©seau: ${error.message}`);
      }
    }
  }

  /**
   * Obtient l'adresse depuis une mnemonic en utilisant le wallet (comme WalletManager)
   */
  async _getAddressFromMnemonic(mnemonic, network) {
    try {
      // Initialiser le framework Kaspa (comme dans WalletManager)
      await ensureFrameworkInitialized();

      // Cr√©er un wallet temporaire pour obtenir l'adresse (m√™me m√©thode que WalletManager)
      const networkOptions = {
        network: network, // Utiliser directement "kaspa" ou "kaspatest" comme WalletManager
      };

      const tempWallet = Wallet.fromMnemonic(mnemonic, networkOptions);

      tempWallet.setLogLevel("error"); // Mode silencieux pour le wallet temporaire
      await tempWallet.ready;

      const address = tempWallet.receiveAddress;
      console.log(`üìç [ApiSender] Adresse d√©riv√©e: ${address}`);

      return address;
    } catch (error) {
      console.error("‚ùå Erreur d√©rivation adresse:", error.message);
      throw new Error(`D√©rivation d'adresse √©chou√©e: ${error.message}`);
    }
  }

  /**
   * Utilitaires de conversion
   */
  _kasToSompis(kas) {
    return Math.floor(kas * 100000000);
  }

  _formatKAS(sompis) {
    return (sompis / 100000000).toFixed(8);
  }

  /**
   * Retourne les alternatives disponibles
   */
  _getAlternatives() {
    return {
      kasware: {
        available: true,
        method: "Extension navigateur",
        steps: [
          "Installer Kasware depuis Chrome Web Store",
          "Importer la cl√© priv√©e",
          "S√©lectionner le r√©seau kaspatest",
          "Envoyer la transaction",
        ],
      },
      kdx: {
        available: true,
        method: "Application desktop",
        steps: [
          "T√©l√©charger KDX depuis kaspa.org",
          "Configurer le r√©seau kaspatest",
          "Importer la cl√© priv√©e",
          "Effectuer la transaction",
        ],
      },
      apiDirect: {
        available: true,
        method: "API REST directe",
        requirement: "Construction compl√®te de transaction requise",
      },
    };
  }

  /**
   * V√©rifie la disponibilit√© des n≈ìuds publics
   */
  async checkNodeAvailability(network) {
    try {
      const apiEndpoint = this.apiEndpoints[network];
      if (!apiEndpoint) return false;

      const response = await axios.get(`${apiEndpoint}/info/network`, {
        timeout: 5000,
      });

      return response.status === 200;
    } catch (error) {
      console.log(`‚ùå N≈ìud ${network} inaccessible:`, error.message);
      return false;
    }
  }
}

module.exports = ApiTransactionSender;
